// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üßë User Model
model User {
  id        String     @id @default(cuid())
  clerkId   String?     @unique // Add this field for Clerk's user ID
  email     String     @unique
  name      String?
  firstName String?    // Add these fields to match Clerk's data
  lastName  String?
  profileImageUrl String?
  collegeName String?
  isAdmin Boolean @default(false)
  messCards MessCard[]
  feedbacks Feedback[]
  createdAt DateTime   @default(now()) // Recommended for tracking
  updatedAt DateTime?   @updatedAt // Recommended for tracking
}

// üí≥ Mess Card
model MessCard {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  purchaseDate DateTime @default(now())
  isActive     Boolean  @default(true)
}

// üçõ Menu Item (Master list)
model MenuItem {
  id         String          @id @default(cuid())
  name       String
  price      Float?
  feedbacks  Feedback[]
  schedules  MenuSchedule[]
}

// üìÖ Menu Schedule (Day + MealTime mapping)
model MenuSchedule {
  id       String     @id @default(cuid())
  day      WeekDay
  type     MealType
  item     MenuItem   @relation(fields: [itemId], references: [id])
  itemId   String
}

// ‚≠ê Feedback
model Feedback {
  id      String    @id @default(cuid())
  rating  Int       // 1-5 stars
  comment String?
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  item    MenuItem  @relation(fields: [itemId], references: [id])
  itemId  String
  createdAt DateTime @default(now())
}

// üçΩÔ∏è Enum for Meal Time
enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}

// üìÜ Enum for Days of the Week
enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}